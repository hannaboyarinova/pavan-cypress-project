Lecture 5 Assertions in Cypress

All assertions come from Chai library
Types of assertions:
    1. implicit (built-in or неявные in russian)
        - should()
        - and()
    2. explicit (явные in russian, assertions that we need to write explicitly)
        - expect() - is used in BDD approach
        - assert() - mainly used in TDD approach

Supported attributes for implicit assertions:
    - eq
    - contain
    - include
    - have.length
    - have.value
    - exist
    - the same attributes with not
    - etc
Connected spec: Assertions.cy.js

Lecture 6 Structure of the project in Cypress
    - cypress - common folder for the whole project
    - downloads - downloaded files
    - e2e - test specs
    - fixtures - static test data
    - screenshots - captured screenshots
    - support - reusable scripts
        - commands.js - custom commands or overwrittenexisting commands
        - e2e.js - loads before tests (runs before tests)
    - videos - captured videos
    - node_modules - modules for cypress
    - cypress.config.js - cypress configuration
    - package.json - dependencies for cypress

    Lecture 7
    - main action for checking checkboxes/radiobuttons is check()
    - check() and click() are interchangeable to make radiobutton or checkbox checked
    - check() only marks checkbox as checked regardless its previous state
    - uncheck() and click() are interchangeable to make checkbox unchecked
    - uncheck() marks checkbox as unchecked regardless previous state
    - click() is used to uncheck previously checked single checkbox
    - li ~ a The sibling combinator. Selects a element following a li element.
    - https://www.freecodecamp.org/news/css-selectors-cheat-sheet/ - css selectors cheat sheet
    - it's possible to check state of checkboxes, check or uncheck etc them one by one and all at a time
        //verify that all checkboxes are unchecked (array of all elements with 'checkbox' type is verified to not be checked)
		cy.get('[type = "checkbox"]').should('not.be.checked')
    - link to spec is RadioButtonsAndCheckboxes.cy.js

    Lecture 8
    - for dropdowns with <select> in-built command select() is used
    - assertion for dropdown with select is should('have.value', 'name') as all options 
    have 'value' attribute to refer to
    - for bootstrap dropdown (without <select>) with test input to suggest 
    option is better way to refer is to check the input and type in
    - there's special option for type() method that allows to imitate keyboard actions
       cy.get('.select2-search__field').type('Belarus', '{ enter }')
    